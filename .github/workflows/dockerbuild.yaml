name: Build & push images for 'reefer ML demo'
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'cassandra/'
      - 'consumer/'
      - 'data_schema/'
      - 'docker/'
      - 'ml/'
      - 'postgresql/'
      - 'scripts/'
      - '*/chart/**'

jobs:
  validate-docker-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: Validate docker registry secrets are defined
      id: validate-docker-secrets
      run: |
        echo "Validating docker registry secrets are defined on the repository"

        FAIL=false

        validate_secret(){
          FIELD=$1
          VALUE=$2

          if [ -z "${VALUE}" ]; then
            echo "The secret ${FIELD} needs to be set on this repository."
            FAIL=true
          else
            echo "The secret ${FIELD} is set on this repository."
          fi
        }

        validate_secret DOCKER_USERNAME ${DOCKER_USERNAME}
        validate_secret DOCKER_PASSWORD ${DOCKER_PASSWORD}
        validate_secret DOCKER_REPOSITORY ${DOCKER_REPOSITORY}
        validate_secret DOCKER_IMAGE_SIMULATOR ${DOCKER_IMAGE_SIMULATOR}
        validate_secret DOCKER_IMAGE_SCORING ${DOCKER_IMAGE_SCORING}

        if [ "${FAIL}" = "true" ]; then
          exit 1
        fi
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        DOCKER_IMAGE_SIMULATOR: ${{ secrets.DOCKER_IMAGE_SIMULATOR }}
        DOCKER_IMAGE_SCORING: ${{ secrets.DOCKER_IMAGE_SCORING }}
  build-docker-images:
    needs:
      validate-docker-secrets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Bump version and push tag
      id: bump-version-action
      uses: osowski/github-tag-action@master
      env:
        DEFAULT_BUMP: patch
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Install latest Appsody CLI
      id: install-appsody-cli
      run: |
        echo "Installing Appsody..."
        APPSODY_RELEASE=$(curl -s https://api.github.com/repos/appsody/appsody/releases/latest \
        | grep "browser_download_url.*deb" \
        | cut -d : -f 2,3 \
        | tr -d \")
        echo "Latest Appsody Release found: ${APPSODY_RELEASE}"
        wget ${APPSODY_RELEASE}
        sudo apt install -f ./appsody_*_amd64.deb
    - name: Build the simulator docker image
      id: build-simulator-image
      run: |
        echo "Build and push the docker image"
        IMAGE_NAME="${DOCKER_R}/${DOCKER_I}"
        docker login -u ${DOCKER_U} -p ${DOCKER_P}
        cd ${WORKDIR}
        appsody build --tag ${IMAGE_NAME}:${IMAGE_TAG} --push
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}
      env:
        DOCKER_U: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_P: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_R: ${{ secrets.DOCKER_REPOSITORY }}
        DOCKER_I: ${{ secrets.DOCKER_IMAGE_SIMULATOR }}
        WORKDIR: simulator
        IMAGE_TAG: ${{ steps.bump-version-action.outputs.new_tag }}
    - name: Build the scoring-mp docker image
      id: build-scoring-image
      run: |
        echo "Build and push the docker image"
        IMAGE_NAME="${DOCKER_R}/${DOCKER_I}"
        docker login -u ${DOCKER_U} -p ${DOCKER_P}
        cd ${WORKDIR}
        appsody build --tag ${IMAGE_NAME}:${IMAGE_TAG} --push
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}
      env:
        DOCKER_U: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_P: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_R: ${{ secrets.DOCKER_REPOSITORY }}
        DOCKER_I: ${{ secrets.DOCKER_IMAGE_SCORING }}
        WORKDIR: scoring-mp
        IMAGE_TAG: ${{ steps.bump-version-action.outputs.new_tag }}
    - name: Webhook to GitOps repo
      id: gitops-repo-webhook
      uses: osowski/repository-dispatch@v1
      if: startsWith(github.repository, 'ibm-cloud-architecture/')
      with:
        token: ${{ secrets.WEBHOOK_TOKEN }}
        repository: ibm-cloud-architecture/refarch-kc-gitops
        event-type: gitops-refresh
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "source": "${{ github.repository }}"}'
