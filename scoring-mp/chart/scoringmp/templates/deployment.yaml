apiVersion: apps/v1
kind: Deployment
metadata:
  name: "scoring-mp"
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
    app.kubernetes.io/part-of: refarch-kc
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: "{{  .Chart.Name }}-selector"
  template:
    metadata:
      labels:
        app: "{{  .Chart.Name }}-selector"
        version: "current"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: "{{  .Chart.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{ if .Values.istio.enabled }}
{{ else }}
        readinessProbe:
          httpGet:
            path: /health
            port: 9080
          initialDelaySeconds: 20
{{ end }}
        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"
        env:
          - name: PORT
            value: "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Release.Name }}"
          ##################################
          ### Predictive model configuration
          ##################################
          - name: PREDICTIONS_ENABLED
            value: "{{ .Values.predictiveModel.predictionsEnabled }}"
          - name: CP4D_BASE_URL
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelConfigMap }}"
                key: baseURL
          - name: CP4D_PREDICTION_URL
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelConfigMap }}"
                key: predictionURL
          - name: CP4D_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelSecret }}"
                key: user
          - name: CP4D_PWD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelSecret }}"
                key: password
          #############################
          ### Reactive Messaging topics
          #############################
          - name: MP_MESSAGING_INCOMING_REEFER_TELEMETRY_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: reeferTelemetryTopic
          - name: MP_MESSAGING_OUTGOING_CONTAINERS_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: containersTopic
{{- if .Values.generatedBindings.enabled }}
{{.Files.Get "bindings.yaml" | indent 10 }}
{{- end }}
        volumeMounts:
          - mountPath: "{{ .Values.kafka.security.bootstrapPath }}"
            subPath: "bootstrap.properties"
            name: openliberty-bootstrap
            readOnly: true
        {{- if .Values.kafka.security.truststoreRequired }}
          - mountPath: "{{ .Values.kafka.security.truststorePath }}"
            name: kafka-truststore
            readOnly: true
        {{- end }}
      volumes:
        - name: openliberty-bootstrap
          secret:
            secretName: "{{ .Values.kafka.security.bootstrapSecret }}"
      {{- if .Values.kafka.security.truststoreRequired }}
        - name: kafka-truststore
          secret:
            secretName: "{{ .Values.kafka.security.truststoreSecret }}"
      {{- end }}
