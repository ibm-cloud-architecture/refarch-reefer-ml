apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{  .Chart.Name }}-deployment"
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  template:
    metadata:
      labels:
        app: "{{  .Chart.Name }}-selector"
        version: "current"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: "{{  .Chart.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{ if .Values.istio.enabled }}
{{ else }}
        readinessProbe:
          httpGet:
            path: /health
            port: 9080
          initialDelaySeconds: 20
{{ end }}
        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"
        env:
          - name: PORT
            value: "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Release.Name }}"
          ##################################
          ### Predictive model configuration
          ##################################
          - name: MOCKUP
            value: "{{ .Values.predictiveModel.mockup }}"
          - name: CP4D_BASE_URL
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelConfigMap }}"
                key: baseURL
          - name: CP4D_PREDICTION_URL
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelConfigMap }}"
                key: predictionURL
          - name: CP4D_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelSecret }}"
                key: user
          - name: CP4D_PWD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.predictiveModel.predictiveModelSecret }}"
                key: password
          #####################################
          ### Messaging backbone configuration
          #####################################
          # Kafka bootstrap servers
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_BOOTSTRAP_SERVERS
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.brokersConfigMap }}"
                key: brokers
          # If we are using ES on IBM Cloud or Kafka with security enabled (API key, etc)
          {{ if .Values.kafka.security.required }}
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SECURITY_PROTOCOL
            value: "{{ .Values.kafka.security.securityProtocol }}"
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SSL_PROTOCOL
            value: "{{ .Values.kafka.security.sslProtocol }}"
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SASL_MECHANISM
            value: "{{ .Values.kafka.security.saslMechanism }}"
          # We need to load this as a secret since it will containe user and password information
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SASL_JAAS_CONFIG
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.kafka.security.saslJaasConfigSecret }}"
                key: saslJaasConfig
          {{ end }}
          # If we are using ES on OpenShift or Kafka requires certificates
          {{ if .Values.kafka.security.truststoreRequired }}
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "{{ .Values.kafka.security.truststorePath }}/{{ .Values.kafka.security.truststoreFile }}"
          - name: MP_MESSAGING_CONNECTOR_LIBERTY-KAFKA_SSL_TRUSTSTORE_PASSWORD
            value: "{{ .Values.kafka.security.truststorePassword }}"
          {{ end }}
          #############################
          ### Reactive Messaging topics
          #############################
          - name: TELEMETRY_TOPIC
            value: "{{ .Values.kafka.telemetryTopicName }}"
          - name: CONTAINERS_TOPIC
            value: "{{ .Values.kafka.containersTopicName }}"
{{- if .Values.generatedBindings.enabled }}
{{.Files.Get "bindings.yaml" | indent 10 }}
{{- end }}
        {{- if .Values.kafka.security.truststoreRequired }}
        volumeMounts:
          - mountPath: "{{ .Values.kafka.security.truststorePath }}"
            name: kafka-truststore
            readOnly: true
        {{- end }}
      {{- if .Values.kafka.security.truststoreRequired }}
      volumes:
        - name: kafka-truststore
          secret:
            secretName: "{{ .Values.kafka.security.truststoreSecret }}"
      {{- end }}
